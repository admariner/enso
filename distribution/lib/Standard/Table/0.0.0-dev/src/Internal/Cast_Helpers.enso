from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Internal.Java_Problems
import project.Internal.Parse_Values_Helper
import project.Internal.Storage
import project.Value_Type.Value_Type
from project.Errors import Conversion_Failure

polyglot java import org.enso.table.data.column.operation.cast.CastOperation

## PRIVATE
   Checks if one type can be cast into another and returns a dataflow error
   explaining the situation if not.
check_cast_compatibility source_type target_type ~action =
    are_compatible =
        if source_type.is_text && Parse_Values_Helper.is_a_valid_parse_target target_type then Error.throw (Illegal_Argument.Error "To parse a text column into "+target_type.to_display_text+" type, `parse` should be used instead of `cast`.") else
            case source_type of
                Value_Type.Binary _ _ -> case target_type of
                    Value_Type.Binary _ _ -> True
                    _ -> False
                _ -> if source_type == target_type then True else
                    target_storage_type = Storage.from_value_type target_type ..Ignore
                    source_storage_type = Storage.from_value_type source_type ..Ignore
                    CastOperation.canApply source_storage_type target_storage_type

    if are_compatible then action else
        Error.throw (Illegal_Argument.Error "Cannot cast "+source_type.to_display_text+" type into "+target_type.to_display_text+" type.")
