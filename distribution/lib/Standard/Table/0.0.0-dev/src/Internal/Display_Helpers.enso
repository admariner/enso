from Standard.Base import all

import project.Table.Table

polyglot java import java.lang.System as Java_System

## PRIVATE

   Renders an ASCII-art representation for a Table from a dataframe that
   contains a fragment of the underlying data and count of all rows.

   Arguments:
   - table: The materialized table that contains the data to be displayed.
   - add_row_index: A boolean flag, specifying whether to display row indices.
   - max_rows_to_show: The maximum amount of rows to display.
   - all_rows_count: The count of all rows in the underlying Table; if
     `all_rows_count` is bigger than the amount of rows displayed, an additional
     line will be included that will say how many hidden rows there are.
     Useful for remote tables where `df` contains only a fragment of the data.
   - format_terminal: A boolean flag, specifying whether to use ANSI escape
     codes for rich formatting in the terminal.
display_table (table : Table) (add_row_index : Boolean) (max_rows_to_show : Integer) (all_rows_count : Integer) (format_terminal : Boolean) -> Text =
    cols = Vector.from_polyglot_array table.java_table.getColumns
    col_names = cols.map .getName . map _normalize_text_for_display
    col_vals = cols.map .getStorage
    display_rows = table.row_count.min max_rows_to_show
    rows = Vector.new display_rows row_num->
        cols = col_vals.map col-> _get_item_as_text col row_num
        if add_row_index then [row_num.to_text] + cols else cols
    table_text = case add_row_index of
        True -> print_table [""]+col_names rows 1 format_terminal
        False -> print_table col_names rows 0 format_terminal
    if display_rows == all_rows_count then table_text else
        missing_rows_count = all_rows_count - display_rows
        missing = '\n\u2026 and ' + missing_rows_count.to_text + ' hidden rows.'
        table_text + missing

## PRIVATE

   A helper function for creating an ASCII-art representation of tabular data.

   Arguments:
   - header: vector of names of columns in the table.
   - rows: a vector of rows, where each row is a vector that contains a text
     representation of each cell
   - indices_count: the number specifying how many columns should be treated as
     indices; this will make them in bold font if `format_term` is enabled.
   - format_term: a boolean flag, specifying whether to use ANSI escape codes
     for rich formatting in the terminal.
print_table : Vector Text -> (Vector (Vector Text)) -> Integer -> Boolean -> Text
print_table header rows indices_count format_term =
    content_lengths = Vector.new header.length i->
        max_row = 0.up_to rows.length . fold 0 a-> j-> a.max (rows.at j . at i . characters . length)
        max_row.max (header.at i . characters . length)
    header_line = header.zip content_lengths pad . map (ansi_bold format_term) . join ' | '
    divider = content_lengths . map (l -> "-".repeat l+2) . join '+'
    row_lines = rows.map r->
        x = r.zip content_lengths pad
        ixes = x.take (..First indices_count) . map (ansi_bold format_term)
        with_bold_ix = ixes + x.drop (..First indices_count)
        y = with_bold_ix . join ' | '
        " " + y
    ([" " + header_line, divider] + row_lines).join '\n'

## PRIVATE

   Ensures that the `txt` has at least `len` characters by appending spaces at
   the end.

   Arguments:
   - txt: The text to pad.
   - len: The minimum length of the text.
pad : Text -> Integer -> Text
pad txt len =
    true_len = txt.characters.length
    txt + (" ".repeat (len - true_len))

## PRIVATE

   Adds ANSI bold escape sequences to text if the feature is enabled.

   Arguments:
   - enabled: will insert ANSI sequences only if this flag is true and we are not on Windows.
   - txt: The text to possibly bold.
ansi_bold : Boolean -> Text -> Text
ansi_bold enabled txt =
    if enabled && (Java_System.console != Nothing) then '\e[1m' + txt + '\e[m' else txt

## PRIVATE
   Gets a textual representation of the item at position `ix` in `storage`.
private _get_item_as_text storage ix =
    item = storage.getItemBoxed ix
    ## Special handling for display of Text to avoid quotes when not necessary.
    case item of
        _ : Text -> _normalize_text_for_display item
        _ -> item.pretty


## PRIVATE
   Ensures that the text can be safely displayed in a terminal.

   If the string contains special characters, it will be wrapped in quotes and
   the characters escaped. Otherwise, the string is returned as-is.
private _normalize_text_for_display text =
    prettified = text.pretty
    just_quoted = "'" + text + "'"
    if prettified == just_quoted then text else prettified
