## An API for manual resource management.

import project.Any.Any
import project.Errors.Common.Uninitialized_State
import project.Meta
import project.Nothing.Nothing
from project.Data.Boolean import Boolean, False, True

## Resource provides an API for manual management of computation resources.

   These include things like file handles, network sockets, and so on. This
   API is intended for use by library developers to provide higher-level and
   easier to use abstractions.

## A managed resource is a special type of resource that is subject to
   automated cleanup when it is no longer in use.

   This API is intended for use by developers to provide easy-to-use
   abstractions, and is not expected to be used by end-users.
@Builtin_Type
type Managed_Resource
    ## PRIVATE
       ADVANCED

       Acquires a resource, performs an action on it, and destroys it safely,
       even in the presence of panics.

       Arguments:
       - constructor: The computation responsible for acquiring the resource.
       - destructor: The computation responsible for destroying the resource
         once it is done being used.
       - action: The computation to perform on the acquired resource.
    bracket : Any -> (Any -> Nothing) -> (Any -> Any) -> Any
    bracket ~constructor ~destructor ~action = @Builtin_Method "Resource.bracket"

    ## PRIVATE
       ADVANCED

       Registers a resource with the resource manager to be cleaned up using
       function once it is no longer in use. The optional `system_finalization_allowed`
       flag allow the system to explicitly call `finalize` on the resource
       when _"needed"_. The definition is intentionally vague, but
       currently the IDE performs such a call when user requests a _"reload"_ -
       e.g. using `Managed_Resource.register cache cleanup_fn True` is useful
       for creating user managed caches.

       Arguments:
       - resource: The resource to register.
       - function: The action to be executed on resource to clean it up when
         it is no longer in use.
       - system_finalization_allowed: is the system allowed to call `finalize`
         on the resource when "needed"

       Returns:
       A `Managed_Resource` object that can be used to access the resource.
    register : Any -> (Any -> Nothing) -> Boolean -> Managed_Resource
    register resource function system_finalization_allowed=False =
        @Tail_Call register_builtin resource function system_finalization_allowed

    ## PRIVATE
       ADVANCED

       Forces finalization of a managed resource using the registered finalizer,
       even if the resource is still reachable.
    finalize : Nothing
    finalize self = @Builtin_Method "Managed_Resource.finalize"

    ## PRIVATE
       ADVANCED

       Executes the provided action on the resource managed by the managed
       resource object. The action is invoked with the managed resource only if
       it has not yet been finalized. If the resource has already been finalized
       then `Error` with `Uninitialized_State` payload is passed into the
       action instead of the resource.

       Arguments:
       - action: The action that will be applied to the resource managed by
         the `Managed_Resource` (or to `Uninitialized_State` error).
       Returns:
       Value returned from the `action`
    with : (Any -> Any) -> Any
    with self ~action = @Tail_Call with_builtin self action

    ## PRIVATE
       ADVANCED

       Takes the value held by the managed resource and unregisters the
       finalization step for this resource, effectively removing it from the
       managed resources system.
    take : Any
    take self = @Builtin_Method "Managed_Resource.take"

    ## PRIVATE
       ADVANCED

       Returns true iff the resource has been collected by the engine, false
       otherwise. If `with` throws any other error, it is propagated.
    has_been_finalized : Boolean
    has_been_finalized self -> Boolean = self.with x->
        if x.is_error.not then False else
            if x.catch.is_a Uninitialized_State then True else x

## PRIVATE
register_builtin r fn sys:Boolean = @Builtin_Method "Managed_Resource.register_builtin"

## PRIVATE
with_builtin r fn = @Builtin_Method "Managed_Resource.with_builtin"
