import project.Any.Any
import project.Data.Dictionary.Dictionary
import project.Data.Pair.Pair
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Errors.Common.Missing_Argument
import project.Meta
import project.Metadata.Widget
import project.Network.HTTP.Header.Header
import project.Nothing.Nothing
import project.System.File.File
from project.Data.Boolean import Boolean, False, True
from project.Data.Json import key_value_widget
from project.Data.Text.Extensions import all
from project.Metadata.Choice import Option
from project.Metadata.Widget import File_Browse, Single_Choice, Text_Input, Vector_Editor
from project.Network.HTTP.Header import content_type_widget
from project.Widget_Helpers import make_all_selector

## The HTTP POST request body.
type Request_Body

    ## Request body with text.

       Arguments:
       - text: The plain text in the request body.
       - encoding: the text encoding to send as a Content-Encoding header
       - content_type: the content_type to send as a Content-Type header
    @encoding Encoding.default_widget
    @content_type content_type_widget
    Text (text:Text="") (encoding:(Encoding|Nothing)=Nothing) (content_type:(Text|Nothing)=Nothing)

    ## Request body with an object to be sent as JSON.

       Arguments:
       - x: The object to convert to JSON using `.to_json`.
    @x make_all_with_json
    Json (x:Any=(Missing_Argument.throw "x"))

    ## Request body with an object to be sent as a binary file.

       Arguments:
       - file: The file to send.
    Binary (file:File=(Missing_Argument.throw "file"))

    ## PRIVATE
       ADVANCED
       Raw bytes array to be sent as binary data.
       This is mostly used for internal purposes.
    Byte_Array bytes

    ## Request body with form data.

       Arguments:
       - form_data: the form fields (text or file) to be sent
       - url_encoded: if true, use a URL-encoded form; otherwise, use a
         multi-part encoding.
    @form_data dictionary_widget
    Form_Data (form_data:Dictionary=(Missing_Argument.throw "form_data")) (url_encoded:Boolean=False)

    ## Empty request body; used for GET
    Empty

    ## PRIVATE
       For `Request_Body.Form_Data url_encoded=False`, this returns `Nothing`,
       because the content type must include a content boundary.
    default_content_type_header : Header | Nothing
    default_content_type_header self =
        case self of
            Request_Body.Text _ _ _   -> Header.content_type "text/plain" encoding=Encoding.utf_8
            Request_Body.Json _       -> Header.content_type "application/json"
            Request_Body.Binary _     -> Header.content_type "application/octet-stream"
            Request_Body.Byte_Array _ -> Header.content_type "application/octet-stream"
            Request_Body.Form_Data _ url_encoded ->
                if url_encoded then Header.application_x_www_form_urlencoded else Nothing
            Request_Body.Empty -> Nothing

## PRIVATE
Request_Body.from (that:Text) = Request_Body.Text that

## PRIVATE
Request_Body.from (that:File) = Request_Body.Binary that

## PRIVATE
Request_Body.from (that:Any) = Request_Body.Json that

## PRIVATE
make_all_with_json =
    base_selector = make_all_selector Request_Body
    values = [Option "JSON Object" key_value_widget] + base_selector.values
    Single_Choice display=..Always values=values

## PRIVATE
dictionary_widget -> Widget =
    fqn = Pair.to Meta.Type . qualified_name . take (..Before_Last '.')
    default = 'pair "key" ""'
    value_editor = Single_Choice display=..Always values=[Option "Text" '""', Option "File" "File.new ''"]
    pair = Option "Pair" fqn+".pair" [["first", Text_Input], ["second", value_editor]]
    item_editor = Single_Choice display=..Always values=[pair]
    Vector_Editor item_editor=item_editor display=..Always item_default=default
