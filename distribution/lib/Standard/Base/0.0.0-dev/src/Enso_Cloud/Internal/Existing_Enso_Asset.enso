private

import project.Data.Dictionary.Dictionary
import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Vector.Vector
import project.Enso_Cloud.Cloud_Caching_Settings
import project.Enso_Cloud.Enso_File.Enso_Asset_Type
import project.Enso_Cloud.Enso_File.Enso_File
import project.Enso_Cloud.Enso_User.Enso_User
import project.Enso_Cloud.Errors.Enso_Cloud_Error
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Time_Error.Time_Error
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Context
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Data_Link_Helpers import data_link_extension
from project.Enso_Cloud.Public_Utils import get_optional_field, get_required_field

## PRIVATE
   Currently, most of the Cloud API relies on asset IDs and not paths.
   This object is a proxy for an existing asset within the cloud - whenever we
   perform an operation that operates on IDs, we can fetch this helper and then
   use it to perform the operation.
type Existing_Enso_Asset
    ## PRIVATE
       Represents an existing asset within the Enso cloud.

       The metadata represents additional information about the asset.
       It is stored if it was available in a response. It may not be present for
       entries saved in cache after an upload operation that does not return metadata.
    private Value title:Text id:Text asset_type:Enso_Asset_Type metadata:Asset_Metadata|Nothing

    ## PRIVATE
       Target URI for the api
    internal_uri self -> Text = case self.id of
        "" -> if self.asset_type == Enso_Asset_Type.Directory then Utils.directory_api else
            Error.throw (Illegal_Argument.Error "Invalid ID for a "+self.asset_type.to_text+".")
        _ -> case self.asset_type of
            Enso_Asset_Type.Directory -> Utils.directory_api + "/" + self.id
            Enso_Asset_Type.File -> Utils.files_api + "/" + self.id
            Enso_Asset_Type.Project -> Utils.projects_api + "/" + self.id
            Enso_Asset_Type.Data_Link -> Utils.datalinks_api + "/" + self.id
            Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be accessed directly.")

    ## PRIVATE
    asset_uri self -> Text = Utils.assets_api + "/" + self.id

    ## PRIVATE
    name self -> Text =
        added_extension = case self.asset_type of
            Enso_Asset_Type.Data_Link -> data_link_extension
            # TODO enable when using new path resolver that should support these
            #Enso_Asset_Type.Secret -> ".secret"
            #Enso_Asset_Type.Project -> ".enso"
            _ -> ""
        self.title + added_extension

    ## PRIVATE
       Fetches the basic information about a file from the Cloud endpoint.

       Arguments:
       - want_presigned_url: Whether to request presigned URL in the response.
         The cloud does not include the presigned URL in the response by default. 
         It should only be asked for when needed.
    get_file_description self want_presinged_url:Boolean=False -> JS_Object =
        if self.asset_type != Enso_Asset_Type.File then
            Panic.throw (Illegal_Argument.Error "`get_file_description` can only be called on File assets.")
        base_uri = URI.from self.internal_uri
        uri = if want_presinged_url then base_uri.add_query_argument "presigned" "true" else base_uri
        Utils.http_request_as_json HTTP_Method.Get uri

    ## PRIVATE
       Fetches the basic information about an existing file from the Cloud.
       It will fail if the file does not exist.

       Arguments:
       - file: The file to fetch the information for.
       - want_metadata: Whether to require metadata for the file.
         If set to True, a cached entry without metadata will not be considered
         and a full fetch will be performed.
    get_asset_reference_for (file : Enso_File) (want_metadata : Boolean = False) -> Existing_Enso_Asset ! File_Error =
        fetch_asset_reference file want_metadata

    ## PRIVATE
       Resolves a path to an existing asset in the cloud.
    resolve_path (path : Text) ~if_not_found = path.if_not_error <|
        handle_not_found _ = Error.throw Not_Found
        error_handlers = Dictionary.from_vector [["resource_missing", handle_not_found]]

        uri = ((URI.from Utils.cloud_root_uri) / "path/resolve") . add_query_argument "path" path
        response = Utils.http_request_as_json HTTP_Method.Get uri error_handlers=error_handlers
        Existing_Enso_Asset.from_json response
            . catch Not_Found _-> if_not_found

    ## PRIVATE
    list_directory self =
        if self.asset_type != Enso_Asset_Type.Directory then Error.throw (Illegal_Argument.Error "Only directories can be listed.") else
             response = Utils.http_request_as_json HTTP_Method.Get self.internal_uri
             assets = get_required_field "assets" response expected_type=Vector
             assets.map Existing_Enso_Asset.from_json

    ## PRIVATE
    from_json json -> Existing_Enso_Asset =
        title = get_required_field "title" json expected_type=Text
        id = get_required_field "id" json expected_type=Text
        metadata = Asset_Metadata.from_json json
        Existing_Enso_Asset.new id title metadata

    ## PRIVATE
    new id:Text title:Text (metadata : Asset_Metadata | Nothing = Nothing) -> Existing_Enso_Asset =
        Existing_Enso_Asset.Value title id (asset_type_from_id id) metadata

## PRIVATE
asset_type_from_id id:Text -> Enso_Asset_Type =
    Enso_Asset_Type.from (id.take (..Before "-"))

## PRIVATE
   The asset metadata that is currently automatically included as part of the path resolution response.
type Asset_Metadata
    ## PRIVATE
    Value modified_at:Date_Time description:Text|Nothing labels:Vector

    ## PRIVATE
    from_json json -> Asset_Metadata =
        modified_at_text = get_required_field "modifiedAt" json expected_type=Text
        modified_at = Date_Time.parse modified_at_text Date_Time_Formatter.iso_offset_date_time
            . catch Time_Error error-> Error.throw (Enso_Cloud_Error.Invalid_Response_Payload error)
        description = get_optional_field "description" json expected_type=Text
        labels = get_optional_field "labels" json expected_type=Vector if_missing=[]
        Asset_Metadata.Value modified_at description labels

## PRIVATE
type Asset_Cache
    ## PRIVATE
    asset_prefix = "asset:"

    ## PRIVATE
    asset_key (file : Enso_File) -> Text = Asset_Cache.asset_prefix+file.enso_path.to_text

    ## PRIVATE
    invalidate (file : Enso_File) =
        Utils.invalidate_cache (Asset_Cache.asset_key file)

    ## PRIVATE
    invalidate_subtree (file : Enso_File) =
        Utils.invalidate_caches_with_prefix (Asset_Cache.asset_key file)

    ## PRIVATE
    invalidate_all =
        Utils.invalidate_caches_with_prefix Asset_Cache.asset_prefix

    ## PRIVATE
    update (file : Enso_File) (asset : Existing_Enso_Asset) =
        Utils.set_cached (Asset_Cache.asset_key file) asset cache_duration=Cloud_Caching_Settings.get_file_cache_ttl

## PRIVATE
   Returns the cached reference or fetches it from the cloud.
fetch_asset_reference (file : Enso_File) (want_metadata : Boolean) -> Existing_Enso_Asset ! File_Error = file.if_not_error <|
    path = file.enso_path.to_text
    on_not_found =
        Error.throw (File_Error.Not_Found file)
    r = Utils.get_cached (Asset_Cache.asset_key file) cache_duration=Cloud_Caching_Settings.get_file_cache_ttl <|
        Existing_Enso_Asset.resolve_path path if_not_found=on_not_found

    needs_refetch = want_metadata && r.metadata.is_nothing
    if needs_refetch.not then r else
        with_metadata = Existing_Enso_Asset.resolve_path path if_not_found=on_not_found
        Asset_Cache.update file with_metadata
        with_metadata
