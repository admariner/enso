import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Encoding_Error.Encoding_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Meta
import project.Metadata.Display
import project.Metadata.Widget
import project.Nothing.Nothing
import project.Panic.Panic
import project.Warning.Warning
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice

polyglot java import java.nio.charset.Charset
polyglot java import java.nio.charset.UnsupportedCharsetException
polyglot java import org.enso.base.Text_Utils

## Represents a character encoding.
type Encoding
    ## PRIVATE
       Gets the default drop down option for Encoding.
    default_widget display:Display=..When_Modified -> Widget =
        fqn = Encoding.to Meta.Type . qualified_name
        values = [Option "UTF-8" fqn+".utf_8", Option "ASCII" fqn+".ascii", Option "UTF-16LE" fqn+".utf_16_le", Option "UTF-16BE" fqn+".utf_16_be", Option "UTF-32LE" fqn+".utf_32_le", Option "UTF-32BE" fqn+".utf_32_be", Option "Windows-1250" fqn+".windows_1250", Option "Windows-1251" fqn+".windows_1251", Option "Windows-1252" fqn+".windows_1252", Option "Windows-1253" fqn+".windows_1253", Option "Windows-1254" fqn+".windows_1254", Option "Windows-1255" fqn+".windows_1255", Option "Windows-1256" fqn+".windows_1256", Option "Windows-1257" fqn+".windows_1257", Option "Windows-1258" fqn+".windows_1258"]
        Single_Choice values=values display=display

    ## PRIVATE
       ADVANCED
       Get all available character sets from Java as Encodings.
       Used to provide auto completion in the UI.
    all_character_sets : Vector Text
    all_character_sets =
        Charset.availableCharsets.keys

    ## PRIVATE
       ADVANCED
       Get all available Encodings.
    all_encodings : Vector Encoding
    all_encodings =
        Encoding.all_character_sets.map Encoding.Value

    ## ICON convert
       Create an Encoding from a Text.
    from_name : Text -> Encoding ! Illegal_Argument
    from_name name =
        handler = _-> Error.throw (Illegal_Argument.Error ("Unknown Character Set: " + name))
        Panic.catch UnsupportedCharsetException handler=handler <|
            charset = Charset.forName name
            Encoding.Value charset.name

    ## PRIVATE
    from_java_charset (charset : Charset) -> Encoding =
        Encoding.Value charset.name

    ## ICON convert
       A default encoding that will try to guess the encoding based on some
       heuristics.

       If a BOM is present, it will be used to determine UTF-8 or UTF-16
       encoding. Otherwise, the input is decoded using UTF-8 unless it contains
       invalid UTF-8 sequences, in which case Windows-1252 is used as a fallback.

       When used for encoding, it will either use the same encoding detection
       heuristics as in read in case of Append mode. When writing a new file,
       it will always use UTF-8.

       This encoding cannot be passed to some functions that require a Java
       Charset.
    default -> Encoding =
        # This factory method is used to publicly expose the `Default` constructor.
        # The constructor itself has to be private, because we want to make `Value` constructor private, but all constructors must have the same privacy.
        Encoding.Default

    ## PRIVATE
       A default encoding that will try to guess the encoding based on some heuristics.
       See `Encoding.default`.
    private Default

    ## PRIVATE
       An encoding identified by its Java name.

       Arguments:
       - character_set: java.nio.charset name.
    private Value (internal_character_set:Text)

    ## PRIVATE
       Convert an Encoding to it's corresponding Java Charset, if applicable.
       This method should be used in places not aware of special logic for the
       Default encoding. In such places, usage of Default encoding will be forbidden.
    to_java_charset : Charset ! Illegal_Argument
    to_java_charset self =
        self.to_java_charset_or_null.if_nothing <|
            warning = Illegal_Argument.Error "The Default encoding has been used in an unexpected place (e.g. Write operation). It will be replaced with UTF-8. Please specify the desired encoding explicitly)"
            Warning.attach warning (Encoding.utf_8.to_java_charset)

    ## PRIVATE
       Convert an Encoding to it's corresponding Java Charset or null if it is the Default encoding.
       This method should only be used in places where a null Charset is expected - i.e. places aware of the Default encoding.
    to_java_charset_or_null : Charset | Nothing ! Illegal_Argument
    to_java_charset_or_null self = case self of
        Encoding.Value charset_name ->
            Panic.catch UnsupportedCharsetException (Charset.forName charset_name) _->
                Error.throw (Illegal_Argument.Error ("Unknown Character Set: " + charset_name))
        Encoding.Default -> Nothing

    ## ICON metadata
       Get the name of the character set.
    character_set_name self -> Text ! Illegal_Argument = case self of
        Encoding.Value charset_name -> charset_name
        Encoding.Default ->
            Error.throw (Illegal_Argument.Error "The Default encoding does not have a character set name. Please select a specific encoding.")

    ## ICON convert
       Encoding for ASCII.
    ascii : Encoding
    ascii = Encoding.Value "US-ASCII"

    ## ICON convert
       Encoding for Unicode UTF-8.
    utf_8 : Encoding
    utf_8 = Encoding.Value "UTF-8"

    ## ICON convert
       Encoding for Unicode UTF-16 Little Endian.
    utf_16_le : Encoding
    utf_16_le = Encoding.Value "UTF-16LE"

    ## ICON convert
       Encoding for Unicode UTF-16 Big Endian.
    utf_16_be : Encoding
    utf_16_be = Encoding.Value "UTF-16BE"

    ## ICON convert
       Encoding for Unicode UTF-32 Little Endian.
    utf_32_le : Encoding
    utf_32_le = Encoding.Value "UTF-32LE"

    ## ICON convert
       Encoding for Unicode UTF-32 Big Endian.
    utf_32_be : Encoding
    utf_32_be = Encoding.Value "UTF-32BE"

    ## ICON convert
       Encoding for Central European (Windows).
    windows_1250 : Encoding
    windows_1250 = Encoding.Value "windows-1250"

    ## ICON convert
       Encoding for Cyrillic (Windows).
    windows_1251 : Encoding
    windows_1251 = Encoding.Value "windows-1251"

    ## ALIAS iso-8859-1
       ICON convert
       Encoding for Western European (Windows).
    windows_1252 : Encoding
    windows_1252 = Encoding.Value "windows-1252"

    ## ICON convert
       Encoding for Greek (Windows).
    windows_1253 : Encoding
    windows_1253 = Encoding.Value "windows-1253"

    ## ALIAS iso-8859-9
       ICON convert
       Encoding for Turkish (Windows).
    windows_1254 : Encoding
    windows_1254 = Encoding.Value "windows-1254"

    ## ICON convert
       Encoding for Hebrew (Windows).
    windows_1255 : Encoding
    windows_1255 = Encoding.Value "windows-1255"

    ## ICON convert
       Encoding for Arabic (Windows).
    windows_1256 : Encoding
    windows_1256 = Encoding.Value "windows-1256"

    ## ICON convert
       Encoding for Baltic (Windows).
    windows_1257 : Encoding
    windows_1257 = Encoding.Value "windows-1257"

    ## ICON convert
       Encoding for Vietnamese (Windows).
    windows_1258 : Encoding
    windows_1258 = Encoding.Value "windows-1258"

    ## PRIVATE
       Convert Encoding to a friendly string.
    to_display_text : Text
    to_display_text self = case self of
        Encoding.Value charset_name -> charset_name
        Encoding.Default -> "Default Encoding"
