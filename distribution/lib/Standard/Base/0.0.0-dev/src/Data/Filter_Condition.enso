import project.Any.Any
import project.Data.Hashset.Hashset
import project.Data.Locale.Locale
import project.Data.Numbers.Number
import project.Data.Text.Case_Sensitivity.Case_Sensitivity
import project.Data.Text.Regex.Regex
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Common.Missing_Argument
import project.Errors.Common.Type_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Function.Function
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Data.Filter_Condition.Filter_Condition import all
from project.Data.Text.Extensions import all
from project.Metadata import Display, make_single_choice, Widget
from project.Metadata.Choice import Option
from project.Widget_Helpers import make_any_selector

polyglot java import org.enso.base.Regex_Utils

type Filter_Condition
    ## Is less than a value (or another column, in case of Table operations)?
    Less than=(Missing_Argument.throw "than")

    ## Is less than or equal to a value (or another column, in case of Table operations)?
    Equal_Or_Less than=(Missing_Argument.throw "than")

    ## Is equal to a value (or another column, in case of Table operations)?
    Equal to=(Missing_Argument.throw "to")

    ## Is greater than or equal to a value (or another column, in case of Table operations)?
    Equal_Or_Greater than=(Missing_Argument.throw "than")

    ## Is greater than a value (or another column, in case of Table operations)?
    Greater than=(Missing_Argument.throw "than")

    ## Is not equal to a value (or another column, in case of Table operations)?
    Not_Equal to=(Missing_Argument.throw "to")

    ## Is between (inclusive) two values (or columns, in case of Table operations)?
    Between lower=(Missing_Argument.throw "lower") upper=(Missing_Argument.throw "upper") keep_or_remove:Filter_Action=..Keep

    ## Is equal to another value, ignoring case (Text only)?

       ? Table Operations
         It accepts a Text value to check if the value equals to it. In case of
         Table operations, it can accept another column - then the corresponding
         values from the source column and the provided column are checked.

       ! Unicode Equality
         The definition of equality includes Unicode canonicalization. I.e. two
         texts are equal if they are identical after canonical decomposition.
         This ensures that different ways of expressing the same character in
         the underlying binary representation are considered equal.
    @locale Locale.default_widget
    Equal_Ignore_Case (to = (Missing_Argument.throw "to")) (locale:Locale=Locale.default) keep_or_remove:Filter_Action=..Keep

    ## Does the value start with a prefix (Text only)?

       ? Table Operations
         It accepts a Text value to check if the value contains it. In case of
         Table operations, it can accept another column - then the corresponding
         values from the source column and the provided column are checked.
    Starts_With (prefix = (Missing_Argument.throw "prefix")) (case_sensitivity:Case_Sensitivity=Case_Sensitivity.Default) keep_or_remove:Filter_Action=..Keep

    ## Does the value end with a suffix (Text only)?

       ? Table Operations
         It accepts a Text value to check if the value contains it. In case of
         Table operations, it can accept another column - then the corresponding
         values from the source column and the provided column are checked.
    Ends_With (suffix = (Missing_Argument.throw "suffix")) (case_sensitivity:Case_Sensitivity=Case_Sensitivity.Default) keep_or_remove:Filter_Action=..Keep

    ## Does the value contain the substring (Text only)?

       ? Table Operations
         It accepts a Text value to check if the value contains it. In case of
         Table operations, it can accept another column - then the corresponding
         values from the source column and the provided column are checked.
    Contains (substring = (Missing_Argument.throw "substring")) (case_sensitivity:Case_Sensitivity=Case_Sensitivity.Default) keep_or_remove:Filter_Action=..Keep

    ## Is equal to Nothing?
    Is_Nothing

    ## Is not equal to Nothing?
    Not_Nothing

    ## Is the value a NaN (Number only)?
    Is_Nan

    ## Is the value not a NaN (Number only)?
    Not_Nan

    ## Is the value infinite (Number only)?
    Is_Infinite

    ## Is the value finite (Number only)?
       Finite numbers are ones that are not infinite nor NaN.
    Is_Finite

    ## Is the value equal to True (Boolean only)?
    Is_True

    ## Is the value equal to False (Boolean only)?
    Is_False

    ## Is equal to "" or Nothing (Text only)?
    Is_Empty

    ## Is not equal to "" and Nothing (Text only)?
    Not_Empty

    ## Does the value match the SQL pattern (Text only)?

       The pattern is interpreted according to the standard SQL convention:
       - the `%` character matches any sequence of characters,
       - the `_` character matches any single character,
       - any other character is matched literally.

       ? Table Operations
         It accepts a Text value to check if the value contains it. In case of
         Table operations, it can accept another column - then the corresponding
         values from the source column and the provided column are checked.

       ! Known Limitations.
         The Truffle regex engine does not transparently handle normalization.
         Due to this limitation, Unicode normalization has been disabled for
         this function, so beware that some equivalent graphemes like 'Å›' and
         's\u0301' will not be matched.
    Like (pattern = (Missing_Argument.throw "pattern")) keep_or_remove:Filter_Action=..Keep

    ## Is the value contained in `values`?

       ? Table Operations
         It accepts a `Vector` of values. In case of Table operations, it can
         also accept another column - then it acts as if `column.to_vector` was
         passed - i.e. every element of the original table's column is checked
         if it is contained in the provided column. The columns can have
         different lengths.

         Using Columns can be particularly useful for Database operations, as
         uploading a temporary table and using its column for an `Is_In` check
         will likely be faster than using the vector directly.
    Is_In values=[] keep_or_remove:Filter_Action=..Keep

    ## PRIVATE
       The action to perform on the matched items.
    action : Filter_Action
    action self = case self of
        Filter_Condition.Between _ _ action -> action
        Filter_Condition.Equal_Ignore_Case _ _ action -> action
        Filter_Condition.Starts_With _ _ action -> action
        Filter_Condition.Ends_With _ _ action -> action
        Filter_Condition.Contains _ _ action -> action
        Filter_Condition.Like _ action -> action
        Filter_Condition.Is_In _ action -> action
        _ -> Filter_Action.Keep

    ## PRIVATE
       Resolves a possibly auto-scoped value to a concrete value.
    resolve_auto_scoped : Any -> Any
    resolve_auto_scoped filter =
        resolve filter:Filter_Condition = filter
        case filter of
            _ : Function -> Panic.catch Type_Error (resolve filter) _->filter
            _ : Filter_Condition -> filter
            _ -> Panic.throw (Illegal_Argument.Error "The filter condition can either be a Function or a Filter_Condition, but got: "+filter.to_display_text)

    ## ICON convert
       Converts a `Filter_Condition` condition into a predicate taking an
       element and returning a value indicating whether the element should be
       accepted by the filter.

       The predicate can handle `Nothing` values in all cases. However, the
       predicate will raise an error if the value is not of the expected type.
    to_predicate : (Any -> Boolean)
    to_predicate self =
        base = case self of
            # == does not need special handling for Nothing
            Equal value -> ==value
            Not_Equal value -> !=value
            Less value -> handle_nothing (<value)
            Equal_Or_Less value -> handle_nothing (<=value)
            Equal_Or_Greater value -> handle_nothing (>=value)
            Greater value -> handle_nothing (>value)
            Between lower upper _ -> handle_nothing <| elem->
                (lower <= elem) && (elem <= upper)
            Equal_Ignore_Case value locale _ ->
                handle_nothing <| txt-> (txt : Text).equals_ignore_case value locale
            Starts_With prefix case_sensitivity _ ->
                handle_nothing <| txt-> (txt : Text).starts_with prefix case_sensitivity
            Ends_With suffix case_sensitivity _ ->
                handle_nothing <| txt-> (txt : Text).ends_with suffix case_sensitivity
            Contains substring case_sensitivity _ ->
                handle_nothing <| txt-> (txt : Text).contains substring case_sensitivity
            Is_Nothing -> elem -> case elem of
                Nothing -> True
                _ -> False
            Not_Nothing -> elem -> case elem of
                Nothing -> False
                _ -> True
            Is_Nan -> handle_nothing x-> (x:Number).is_nan
            Not_Nan -> handle_nothing x-> (x:Number).is_nan.not
            Is_Infinite -> handle_nothing x-> (x:Number).is_infinite
            Is_Finite -> handle_nothing x-> (x:Number).is_finite
            Is_True -> handle_nothing b-> (b:Boolean)==True
            Is_False -> handle_nothing b-> (b:Boolean)==False
            Is_Empty -> elem-> elem.is_nothing || (elem : Text)==""
            Not_Empty -> handle_nothing elem-> (elem : Text)!=""
            Like sql_pattern _ ->
                regex = sql_like_to_regex sql_pattern
                handle_nothing <| regex.matches
            Is_In values _ -> Hashset.from_vector values . contains
        if self.action == Filter_Action.Keep then base else v -> (base v).not

    ## PRIVATE
       Convert to a display representation of this Filter_Condition.
    to_display_text : Text
    to_display_text self =
        render_case case_sensitivity =
            if case_sensitivity == Case_Sensitivity.Default then "" else " Case " + case_sensitivity.to_display_text

        condition = case self of
            Less value -> "<" + value.to_display_text
            Equal_Or_Less value -> "<=" + value.to_display_text
            Equal value -> "==" + value.to_display_text
            Equal_Or_Greater value -> ">=" + value.to_display_text
            Greater value -> ">" + value.to_display_text
            Not_Equal value -> "!=" + value.to_display_text
            Between lower upper _ -> "Between " + lower.to_display_text + " And " + upper.to_display_text
            Equal_Ignore_Case value locale _ ->
                suffix = if locale == Locale.default then "" else " (within locale " + locale.to_display_text + ")"
                "Equal Ignore Case " + value.to_display_text + suffix
            Starts_With prefix case_sensitivity _ -> "Starts With " + prefix.to_display_text + (render_case case_sensitivity)
            Ends_With suffix case_sensitivity _ -> "Ends With " + suffix.to_display_text + (render_case case_sensitivity)
            Contains substring case_sensitivity _ -> "Contains " + substring.to_display_text + (render_case case_sensitivity)
            Is_Nothing -> "is Nothing"
            Not_Nothing -> "is not Nothing"
            Is_Nan -> "is NaN"
            Not_Nan -> "is not NaN"
            Is_Infinite -> "is Infinite"
            Is_Finite -> "is Finite"
            Is_True -> "is True"
            Is_False -> "is False"
            Is_Empty -> "is Empty"
            Not_Empty -> "is not Empty"
            Like sql_pattern _ -> "Like " + sql_pattern.to_display_text
            Is_In values _ -> "is in " + values.to_display_text
        "Filter Condition: " + condition + (if self.action == Filter_Action.Keep then "" else " (Remove)")

    ## PRIVATE
       Creates a Single_Choice Widget for delimiters.
    default_widget include_comparable:Boolean=True include_text:Boolean=True include_boolean:Boolean=True include_nullable:Boolean=True include_numeric:Boolean=True include_date:Boolean=True include_time:Boolean=True include_date_time:Boolean=True display:Display=..When_Modified -> Widget =
        options = Vector.build builder->
            equatable_types = make_any_selector add_text=include_text add_boolean=include_boolean add_number=include_numeric add_date=include_date add_time=include_time add_date_time=include_date_time
            builder.append (Option "Equals" "..Equal" [["to", equatable_types]])
            builder.append (Option "Not Equals" "..Not_Equal" [["to", equatable_types]])

            if include_comparable then
                comparable_types = make_any_selector add_text=include_text add_number=include_numeric add_date=include_date add_time=include_time add_date_time=include_date_time
                builder.append (Option "Less Than" "..Less" [["than", comparable_types]])
                builder.append (Option "Less Than Or Equal" "..Equal_Or_Less" [["than", comparable_types]])
                builder.append (Option "Greater Than" "..Greater" [["than", comparable_types]])
                builder.append (Option "Greater Than Or Equal" "..Equal_Or_Greater" [["than", comparable_types]])
                builder.append (Option "Between" "..Between" [["lower", comparable_types], ["upper", comparable_types]])

            if include_text then
                builder.append (Option "Equals Ignore Case" "..Equal_Ignore_Case" [["to", Widget.Text_Input]])
                builder.append (Option "Starts With" "..Starts_With" [["prefix", Widget.Text_Input]])
                builder.append (Option "Ends With" "..Ends_With" [["suffix", Widget.Text_Input]])
                builder.append (Option "Contains" "..Contains" [["substring", Widget.Text_Input]])
                builder.append (Option "Like" "..Like" [["pattern", Widget.Text_Input]])

            if include_nullable then
                builder.append (Option "Is Nothing" "..Is_Nothing")
                builder.append (Option "Is Not Nothing" "..Not_Nothing")

            if include_boolean then
                builder.append (Option "Is True" "..Is_True")
                builder.append (Option "Is False" "..Is_False")

            value_editor = Widget.Vector_Editor item_editor=equatable_types display=Display.Always item_default='""'
            builder.append (Option "Is In" "..Is_In" [["values", value_editor]])

            if include_numeric then
                builder.append (Option "Is Finite" "..Is_Finite")
                builder.append (Option "Is Infinite" "..Is_Infinite")
                builder.append (Option "Is NaN" "..Is_Nan")
                builder.append (Option "Is Not NaN" "..Not_Nan")

            if include_text then
                builder.append (Option "Is Empty" "..Is_Empty")
                builder.append (Option "Is Not Empty" "..Not_Empty")

        make_single_choice options display=display

## Specifies the action of a Filter_Condition.
type Filter_Action
    ## Items matching the filter are kept.
    Keep

    ## Items matching the filter are removed.
    Remove

## PRIVATE
sql_like_to_regex (sql_pattern : Text) =
    regex_pattern = Regex_Utils.sql_like_pattern_to_regex sql_pattern
    Regex.compile regex_pattern

## PRIVATE
unify_condition_or_predicate : Filter_Condition | (Any -> Boolean) -> (Any -> Boolean)
unify_condition_or_predicate (condition_or_predicate : Filter_Condition | (Any -> Boolean)) =
    case Filter_Condition.resolve_auto_scoped condition_or_predicate of
        condition : Filter_Condition -> condition.to_predicate
        predicate -> predicate

## PRIVATE
unify_condition_predicate_or_element condition =
    case condition of
        condition : Filter_Condition -> condition.to_predicate
        predicate : Function ->
            resolved = Filter_Condition.resolve_auto_scoped predicate
            case resolved of
                condition : Filter_Condition -> condition.to_predicate
                _ -> resolved
        element -> (== element)

## PRIVATE
   Extends the provided predicate to handle `Nothing` values without error.
   The new predicate will return `False` for `Nothing`.
handle_nothing : (Any -> Boolean) -> (Any -> Boolean)
handle_nothing f = elem-> case elem of
    Nothing -> False
    _ -> f elem
