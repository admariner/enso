from Standard.Base import all
import Standard.Base

from Standard.Test import all

polyglot java import org.enso.base_test_helpers.CallbackHelper


type My_Type
    Value foo bar baz

add_specs suite_builder = suite_builder.group "Meta-Value Inspection" group_builder->
    pending_js_missing = if Polyglot.is_language_installed "js" then Nothing else
        "Can't run JavaScript tests, language `js` is not installed."

    location_pending = case Platform.os of
        Platform.OS.Windows -> "This test is disabled on Windows until issue 1561 is fixed."
        _ -> Nothing

    group_builder.specify "should allow to get the source location of a frame" pending=location_pending <|
        src = Test.get_source_location 0
        loc = "Meta_Location_Spec.enso:21:15-40"
        src.take (..Last loc.length) . should_equal loc

    group_builder.specify "should allow to get qualified type names of values" <|
        x = 42
        y = My_Type.Value 1 2 3
        x.to Meta.Type . qualified_name . should_equal "Standard.Base.Data.Numbers.Integer"
        x.to Meta.Type . name . should_equal "Integer"
        y.to Meta.Type . qualified_name . should_equal "enso_dev.Base_Tests.Semantic.Meta_Location_Spec.My_Type"
        y.to Meta.Type . name . should_equal "My_Type"

    group_builder.specify "should allow access to package names" <|
        enso_project.name.should_equal 'Base_Tests'
        (Project_Description.new Base).name.should_equal 'Base'

    group_builder.specify "should allow to fetch enso project description from a module" <|
        (Project_Description.new Standard.Base.Data.Vector).name.should_equal "Base"

    group_builder.specify "enso_project can be called from polyglot code" pending=pending_js_missing <|
        proj_name = js_proj_name (_ -> enso_project.name)
        proj_name . should_equal "Base_Tests"

    group_builder.specify "enso_project can be called from Java code" <|
        callback _ = enso_project.name
        res = CallbackHelper.runCallbackInt callback 42
        res . should_equal "Base_Tests"


foreign js js_proj_name proj_name_fn = """
    return proj_name_fn(42);


main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

