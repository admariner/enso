from Standard.Base import all
import Standard.Base.Errors.Common.No_Such_Method

from Standard.Test import all

type Abeceda
    private A
    private B
    private C

    sample self = case self of
        Abeceda.A -> 'astronaut'
        Abeceda.B -> 'bicycle'
        Abeceda.C -> 'center'

    as x converge:Boolean =
        t = if converge then (x : Abeceda) else x
        t.sample

add_specs suite_builder =
    suite_builder.group "identity" group_builder->
        group_builder.specify "identity on number" <|
            (identity 5) . should_equal 5

        group_builder.specify "identity on text" <|
            (identity '5') . should_equal '5'

        group_builder.specify "identity on boolean" <|
            (identity False) . should_equal False

    suite_builder.group "flip" group_builder->
        group_builder.specify "flip on number" <|
            (flip (-) 2 5) . should_equal 3

        group_builder.specify "flip on text" <|
            (flip (+) "world" "hello") . should_equal "helloworld"

    suite_builder.group "const" group_builder->
        group_builder.specify "const on number" <|
            two = const 2
            two 5 . should_equal 2

    suite_builder.group "curry" group_builder->
        group_builder.specify "curry on number list" <|
            sum = x -> x.fold 0 (+)
            sum [1, 2, 3, 4] . should_equal 10
            plus = curry sum
            plus 6 3 . should_equal 9

    suite_builder.group "uncurry" group_builder->
        group_builder.specify "uncurry on number list" <|
            times = uncurry (*)
            times [6, 7] . should_equal 42

    suite_builder.group "No_Such_Method" group_builder->
        group_builder.specify "conversion of ..B" <|
            Abeceda.as ..B True . should_equal "bicycle"

        group_builder.specify "no conversion of ..B" <|
            p = Panic.recover No_Such_Method <|
                Abeceda.as ..B False

            p . should_fail_with No_Such_Method
            p.to_display_text . should_contain "Method `sample`"
            p.to_display_text . should_contain "of ..B"
            p.to_display_text . should_contain "not be found"

        group_builder.specify "no conversion of Integer value" <|
            p = Panic.recover No_Such_Method <|
                Abeceda.as 10 False

            p . should_fail_with No_Such_Method
            p.to_display_text . should_contain "Method `sample`"
            p.to_display_text . should_contain "of type Integer"
            p.to_display_text . should_contain "not be found"

        group_builder.specify "no conversion of function value" <|
            p = Panic.recover No_Such_Method <|
                Abeceda.as add_specs False

            p . should_fail_with No_Such_Method
            p.to_display_text . should_contain "Method `sample`"
            p.to_display_text . should_contain "of Function_Spec.add_specs"
            p.to_display_text . should_contain "[Function_Spec.enso:"
            p.to_display_text . should_contain "self=Function_Spec"
            p.to_display_text . should_contain "suite_builder=_"
            p.to_display_text . should_contain "not be found"

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter
