from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Common.Incomparable_Values

from Standard.Table import Sort_Column
from Standard.Table.Errors import all

from Standard.Test import all

import Standard.Database.Feature.Feature
from Standard.Database.Errors import all

from project.Common_Table_Operations.Util import run_default_backend

main filter=Nothing = run_default_backend add_specs filter

type Data
    Value ~data

    connection self = self.data.at 0
    table self = self.data.at 1

    setup create_connection_fn table_builder = Data.Value <|
        connection = create_connection_fn Nothing
        mk_table =
            col1 = ["alpha", [3, 2, 1, 0]]
            col2 = ["beta", ["a", "b", "a", "b"]]
            col3 = ["gamma", [1, 2, 3, 4]]
            col4 = ["delta", ["a10", "a1", "a2", "a03"]]
            col5 = ["eta", ["Beta", "alpha", "bądź", "Aleph"]]
            col6 = ["xi", [1.0, 1.5, Nothing, 0.5]]
            col7 = ["psi", [Nothing, "c01", "c10", "C2"]]
            col8 = ["phi", ["śc", Nothing, 's\u0301b', "śa"]]
            col9 = ["tau", [32.0, 0.5, -0.1, 1.6]]
            col10 = ["rho", ["BB", Nothing, Nothing, "B"]]
            table_builder [col1, col2, col3, col4, col5, col6, col7, col8, col9, col10] connection=connection
        [connection, mk_table]

    teardown self =
        self.connection.close


type My_Type
    Foo x

add_specs suite_builder setup =
    if setup.is_feature_supported Feature.Sort then (add_order_specs suite_builder setup) else
        suite_builder.group setup.prefix+"Table.sort" group_builder->
            group_builder.specify "sort should report unsupported" <|
                table_builder = setup.light_table_builder
                t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [100, 3, Nothing, 4, 12]], ["Y", [100, 4, 2, Nothing, 11]]]
                table_2 = t.sort ["ix"]
                table_2.should_fail_with (Unsupported_Database_Operation.Error "sort")

add_order_specs suite_builder setup =
    prefix = setup.prefix
    create_connection_fn = setup.create_connection_func

    suite_builder.group prefix+"Table.sort" group_builder->
        data = Data.setup create_connection_fn setup.table_builder

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should work as shown in the doc examples" <|
            t1 = data.table.sort ["alpha"]
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            ## Assumes stable sorting on database engine.
            t2 = data.table.sort [1, ..Index -8 ..Descending]
            t2.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t2.at "gamma" . to_vector . should_equal [3, 1, 4, 2]
            t2.at "alpha" . to_vector . should_equal [1, 3, 0, 2]

            t3 = data.table.sort [..Select_By_Name "a.*".to_regex case_sensitivity=..Insensitive]
            t3.at "alpha" . to_vector . should_equal [0, 1, 2, 3]

        group_builder.specify "should work with single column name" <|
            t1 = data.table.sort "alpha"
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

        group_builder.specify "should work with single Sort_Column" <|
            t1 = data.table.sort [..Name "alpha"]
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            t2 = t1.sort [..Name "alpha" ..Descending]
            t2.at "alpha" . to_vector . should_equal [3, 2, 1, 0]
            t2.at "gamma" . to_vector . should_equal [1, 2, 3, 4]

            t3 = data.table.sort [..Index 0]
            t3.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t3.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            t4 = t3.sort [..Index 0 ..Descending]
            t4.at "alpha" . to_vector . should_equal [3, 2, 1, 0]
            t4.at "gamma" . to_vector . should_equal [1, 2, 3, 4]

        group_builder.specify "should allow the selector to mix regex and case insensitive matching" <|
            t4 = data.table.sort [..Select_By_Name "A.*".to_regex case_sensitivity=..Insensitive]
            t4.at "alpha" . to_vector . should_equal [0, 1, 2, 3]

        group_builder.specify "should correctly handle regexes matching multiple names" <|
            t1 = data.table.sort [..Select_By_Name ".*ta".to_regex ..Descending]
            t1.at "beta" . to_vector . should_equal ["b", "b", "a", "a"]
            t1.at "delta" . to_vector . should_equal ["a1", "a03", "a2", "a10"]
            t1.at "gamma" . to_vector . should_equal [2, 4, 3, 1]

        group_builder.specify "should correctly handle problems: out of bounds indices" <|
            selector = [0, 100, ..Index -200, ..Index 300]
            expected_problem = Missing_Input_Columns.Error [100, -200, 300]
            t1 = data.table.sort selector
            t1.should_fail_with Missing_Input_Columns
            t1.catch . should_equal expected_problem

            action = data.table.sort selector error_on_missing_columns=False on_problems=_
            tester table =
                table.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            Problems.test_problem_handling action [expected_problem] tester

        group_builder.specify "should correctly handle edge-cases: duplicate selectors" <|
            selector1 = ["alpha", ..Name "alpha" ..Descending]
            t1 = data.table.sort selector1
            Problems.assume_no_problems t1
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            t2 = data.table.sort [..Index 0, ..Index 0 ..Descending]
            Problems.assume_no_problems t2
            t2.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t2.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            t3 = data.table.sort [..Index 0, ..Name "alpha" ..Descending]
            Problems.assume_no_problems t3
            t3.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t3.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

        group_builder.specify "should correctly handle edge-cases: duplicate matches due to case insensitivity" <|
            selector = [..Select_By_Name "ALPHA" case_sensitivity=..Insensitive, ..Select_By_Name "alpha" ..Descending]
            t1 = data.table.sort selector
            Problems.assume_no_problems t1
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

        group_builder.specify "should correctly handle edge-cases: duplicate matches due to regexes" <|
            selector = [..Select_By_Name "a.*".to_regex, ..Select_By_Name "alpha" ..Descending]
            t1 = data.table.sort selector
            Problems.assume_no_problems t1
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

        group_builder.specify "should correctly handle edge-cases: mixed selector types" <|
            t1 = data.table.sort [..Name "alpha", ..Index 1]
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "beta" . to_vector . should_equal ["b", "a", "b", "a"]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            t2 = data.table.sort [..Select_By_Name "a.*a".to_regex, ..Index 1]
            t2.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t2.at "beta" . to_vector . should_equal ["b", "a", "b", "a"]
            t2.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

        group_builder.specify "should correctly handle problems: unmatched names" <|
            weird_name = '.*?-!@#!"'
            selector = [..Name "alpha", "hmm", ..Name weird_name]
            expected_problem = Missing_Input_Columns.Error ["hmm", weird_name]
            t1 = data.table.sort selector
            t1.should_fail_with Missing_Input_Columns
            t1.catch . should_equal expected_problem

            action = data.table.sort selector error_on_missing_columns=False on_problems=_
            tester table =
                table.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            Problems.test_problem_handling action [expected_problem] tester

        group_builder.specify "should report a problem if no columns are selected for ordering" <|
            t2 = data.table.sort []
            t2.should_fail_with No_Input_Columns_Selected

        group_builder.specify "should stack consecutive ordering operations" <|
            t1 = data.table.sort [..Name "alpha"]
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "beta" . to_vector . should_equal ["b", "a", "b", "a"]

            # Now we reverse the order
            t2 = t1.sort [..Name "alpha" ..Descending]
            t2.at "alpha" . to_vector . should_equal [3, 2, 1, 0]
            t2.at "beta" . to_vector . should_equal ["a", "b", "a", "b"]

            # Now we add another primary ordering, but the order from t1/t2 is kept for tie breaking.
            t3 = t1.sort [..Name "beta"]
            t3.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t3.at "alpha" . to_vector . should_equal [1, 3, 0, 2]

            t4 = t2.sort ["beta"]
            t4.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t4.at "alpha" . to_vector . should_equal [3, 1, 2, 0]

        group_builder.specify "should give priority to the first selected column and use the next ones for breaking ties" <|
            t1 = data.table.sort ["beta", ..Name "alpha" ..Ascending]
            t1.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t1.at "alpha" . to_vector . should_equal [1, 3, 0, 2]
            t1.at "gamma" . to_vector . should_equal [3, 1, 4, 2]

            t1a = data.table.sort ["beta", ..Name "alpha" ..Ascending]
            t1a.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t1a.at "alpha" . to_vector . should_equal [1, 3, 0, 2]
            t1a.at "gamma" . to_vector . should_equal [3, 1, 4, 2]

            t2 = data.table.sort [..Name "beta", ..Name "alpha" ..Descending]
            t2.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t2.at "alpha" . to_vector . should_equal [3, 1, 2, 0]
            t2.at "gamma" . to_vector . should_equal [1, 3, 2, 4]

            t3 = data.table.sort [..Name "alpha", ..Name "beta"]
            t3.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t3.at "beta" . to_vector . should_equal ["b", "a", "b", "a"]
            t3.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

            t4 = data.table.sort [..Index 1, ..Index 0 ..Ascending]
            t4.at "beta" . to_vector . should_equal ["a", "a", "b", "b"]
            t4.at "alpha" . to_vector . should_equal [1, 3, 0, 2]
            t4.at "gamma" . to_vector . should_equal [3, 1, 4, 2]

        group_builder.specify "should deal with real numbers, and not warn when ordering by floats" <|
            t1 = data.table.sort ["tau"]
            t1.at "tau" . to_vector . should_equal [-0.1, 0.5, 1.6, 32.0]
            t1.at "alpha" . to_vector . should_equal [1, 2, 0, 3]
            Problems.assume_no_problems t1

        group_builder.specify "should deal with nulls" <|
            t1 = data.table.sort ["xi"]
            t1.at "xi" . to_vector . should_equal [Nothing, 0.5, 1.0, 1.5]
            t1.at "alpha" . to_vector . should_equal [1, 0, 3, 2]

            t2 = data.table.sort [..Name "rho"]
            t2.at "rho" . to_vector . should_equal [Nothing, Nothing, "B", "BB"]

            t3 = data.table.sort [..Name "rho" ..Descending]
            t3.at "rho" . to_vector . should_equal ["BB", "B", Nothing, Nothing]

        group_builder.specify "should behave as expected with Unicode normalization, depending on the defaults settings" <|
            t1 = data.table.sort [..Name "phi"]
            case setup.flagged ..Order_By_Unicode_Normalization_By_Default of
                True ->
                    t1.at "phi" . to_vector . should_equal [Nothing, "śa", 's\u0301b', "śc"]
                    t1.at "alpha" . to_vector . should_equal [2, 0, 1, 3]
                False ->
                    t1.at "phi" . to_vector . should_equal [Nothing, 's\u0301b', "śa", "śc"]
                    t1.at "alpha" . to_vector . should_equal [2, 1, 0, 3]

        group_builder.specify "should support natural ordering" <|
            t1 = data.table.sort [..Name "delta"] text_ordering=(..Default sort_digits_as_numbers=True)
            case setup.flagged ..Supports_Sort_Digits_As_Numbers of
                True ->
                    t1.at "delta" . to_vector . should_equal ["a1", "a2", "a03", "a10"]
                    t1.at "alpha" . to_vector . should_equal [2, 1, 0, 3]
                False ->
                    t1.should_fail_with (Unsupported_Database_Operation.Error "sort_digits_as_numbers")

            t2 = data.table.sort ["delta"] text_ordering=(..Default sort_digits_as_numbers=False)
            t2.at "delta" . to_vector . should_equal ["a03", "a1", "a10", "a2"]
            t2.at "alpha" . to_vector . should_equal [0, 2, 3, 1]

        if setup.flagged ..Supports_Case_Insensitive_Ordering then group_builder.specify "should support case insensitive ordering" <|
            t1 = data.table.sort [..Name "eta"] text_ordering=(..Case_Insensitive)
            expected = case setup.flagged ..Order_By_Unicode_Normalization_When_Case_Insensitive of
                False -> ["Aleph", "alpha", "Beta", "bądź"]
                True -> ["Aleph", "alpha", "bądź", "Beta"]
            t1.at "eta" . to_vector . should_equal expected

            t2 = data.table.sort [..Name "eta"] text_ordering=(..Case_Sensitive)
            t2.at "eta" . to_vector . should_equal ["Aleph", "Beta", "alpha", "bądź"]

            t3 = data.table.sort [..Name "psi"] text_ordering=(..Case_Insensitive)
            t3.at "psi" . to_vector . should_equal [Nothing, "c01", "c10", "C2"]

            t4 = data.table.sort [..Name "psi" ..Descending] text_ordering=(..Case_Sensitive)
            t4.at "psi" . to_vector . should_equal ["c10", "c01", "C2", Nothing]

        group_builder.specify "should support natural and case insensitive ordering at the same time" <|
            t1 = data.table.sort [..Name "psi"] text_ordering=(..Case_Insensitive sort_digits_as_numbers=True)
            case setup.flagged ..Supports_Sort_Digits_As_Numbers of
                True -> t1.at "psi" . to_vector . should_equal [Nothing, "c01", "C2", "c10"]
                False -> t1.should_fail_with (Unsupported_Database_Operation.Error "sort_digits_as_numbers")

            t2 = data.table.sort [..Name "psi"] text_ordering=(..Default sort_digits_as_numbers=True)
            case setup.flagged ..Supports_Sort_Digits_As_Numbers of
                True -> t2.at "psi" . to_vector . should_equal [Nothing, "C2", "c01", "c10"]
                False -> t2.should_fail_with (Unsupported_Database_Operation.Error "sort_digits_as_numbers")

            t3 = data.table.sort [..Name "psi"] text_ordering=(..Case_Insensitive)
            t3.at "psi" . to_vector . should_equal [Nothing, "c01", "c10", "C2"]

            t4 = data.table.sort [..Name "psi"]
            case setup.flagged ..Case_Insensitive_Ordering_By_Default of
                True -> t4.at "psi" . to_vector . should_equal [Nothing, "c01", "c10", "C2"]
                False -> t4.at "psi" . to_vector . should_equal [Nothing, "C2", "c01", "c10"]

        group_builder.specify "text ordering settings should not affect numeric columns" <|
            ordering = ..Case_Insensitive sort_digits_as_numbers=True
            t1 = data.table.sort [..Name "alpha"] text_ordering=ordering
            t1.at "alpha" . to_vector . should_equal [0, 1, 2, 3]
            t1.at "gamma" . to_vector . should_equal [4, 3, 2, 1]

        if setup.is_database.not then
            group_builder.specify "should allow ordering enso objects with a comparator" <|
                t = table_builder [["X", [Day_Of_Week.Friday, Day_Of_Week.Monday, Nothing, Nothing, Day_Of_Week.Wednesday]]]
                t.sort "X" . at "X" . to_vector . should_equal [Nothing, Nothing, Day_Of_Week.Monday, Day_Of_Week.Wednesday, Day_Of_Week.Friday]

            group_builder.specify "should raise Incomparable_Values if ordering by incomparable values" <|
                t = table_builder [["X", [My_Type.Foo 42, My_Type.Foo "a"]]]
                t.sort "X" . should_fail_with Incomparable_Values
