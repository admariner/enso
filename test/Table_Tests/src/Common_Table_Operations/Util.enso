from Standard.Base import all
from Standard.Table import Column, Table, Value_Type

import Standard.Database.DB_Table.DB_Table

from Standard.Test import all

from project.In_Memory.Common_Spec import in_memory_setup

expect_column_names names table ignore_order=False =
    case ignore_order of
        False -> table.columns . map .name . should_equal names frames_to_skip=2
        True -> table.columns . map .name . sort . should_equal names.sort frames_to_skip=2

## These tests are parametrized by various backends and so they should be run in
   context of a specific backend. However, for the purpose of testing we provide
   a shortcut that allows to run these tests with the in-memory backend.

   Arguments:
   - add_specs: A function that takes two parameters: a suite builder and Test_Setup.
     And adds test specs to the suite builder.
   - filter: An optional Text filter for filtering out test specs and groups. See the
     docs of `Test.Suite.run_with_filter`.
run_default_backend add_specs filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder in_memory_setup
    suite.run_with_filter filter


## Adds a clue which will display the provided table next to the failed test
   description.

   > Example
     Test a property of the table, displaying its contents if the test fails.

         t = Table.new [["A", [1, 2, 3]]]
         within_table t <|
             t.at "A" . to_vector . should_equal [1, 2, 3]
within_table table =
    description =
        case table of
            _ : DB_Table ->
                code = table.to_sql.to_text
                simplified = if table.name . contains "-" . not then 'SQL: ' + code else
                    # Risky heuristic but should be good enough for debugging tests and it helps so much!
                    'Simplified SQL: ' + code.replace table.name (table.name.take (..Before "-"))
                simplified + '\n\n' + table.display
            _ -> table.display
    Test.with_clue 'Resulting table:\n'+description+'\n\n'

## PRIVATE
Any.should_equal_tz_agnostic self other =
    loc = Test.get_source_location 1
    _ = other
    Test.fail "Expected a vector but got "+self.to_display_text+" (at "+loc+")."

## PRIVATE
   A helper method that compares two vectors of Date_Time values.

   It ensures that they represent the same instant in time, but ignore the
   timezone that is attached to them. This is simply done by converting them to
   UTC.
Vector.should_equal_tz_agnostic self other =
    loc = Test.get_source_location 1
    case other of
        _ : Vector ->
            utc = Time_Zone.utc
            normalize_date_time dt = case dt of
                _ : Date_Time -> dt.at_zone utc
                _ -> Test.fail "The vector should contain Date_Time objects but it contained "+dt.to_display_text+" (at "+loc+")"
            self_normalized = self.map normalize_date_time
            other_normalized = other.map normalize_date_time
            self_normalized.should_equal other_normalized frames_to_skip=2
        _ -> Test.fail "Expected a vector but got "+other.to_display_text+" (at "+loc+")"

## PRIVATE
Error.should_equal_tz_agnostic self other =
    loc = Test.get_source_location 1
    _ = other
    Test.fail "Expected a vector but got a dataflow error "+self.catch.to_display_text+" (at "+loc+")."

## PRIVATE
   Builds a table ensuring that the rows are in the order as given.
build_sorted_table setup table_structure =
    # Workaround for https://github.com/enso-org/enso/issues/10321
    if setup.prefix.contains "Snowflake" . not && setup.prefix.contains "SQLServer" . not then setup.table_builder table_structure else
        row_count = case table_structure.first of
            def : Vector -> def.second.length
            col : Column -> col.length
        if row_count == 0 then setup.table_builder table_structure else
            new_structure = table_structure+[["row_id", (0.up_to row_count) . to_vector]]
            setup.table_builder new_structure . sort "row_id" . remove_columns ["row_id"]

## PRIVATE
is_float_or_decimal ~column = case column.value_type of
    Value_Type.Float _ -> Nothing
    Value_Type.Decimal _ _ -> Nothing
    other -> Test.fail "Expected "+column.name+" to be a float or decimal, but got "+other.to_display_text
