from Standard.Base import all

import Standard.Database.Internal.Replace_Params.Replace_Params

from Standard.Test import Test

import project.Common_Table_Operations.Add_Group_Number_Spec
import project.Common_Table_Operations.Add_Row_Number_Spec
import project.Common_Table_Operations.Aggregate_Spec
import project.Common_Table_Operations.Coalesce_Spec
import project.Common_Table_Operations.Column_Name_Edge_Cases_Spec
import project.Common_Table_Operations.Column_Operations_Spec
import project.Common_Table_Operations.Core_Spec
import project.Common_Table_Operations.Cross_Tab_Spec
import project.Common_Table_Operations.Conversion_Spec
import project.Common_Table_Operations.Date_Time_Spec
import project.Common_Table_Operations.Derived_Columns_Spec
import project.Common_Table_Operations.Distinct_Spec
import project.Common_Table_Operations.Expression_Spec
import project.Common_Table_Operations.Filter_Spec
import project.Common_Table_Operations.Integration_Tests
import project.Common_Table_Operations.Join.Join_Spec
import project.Common_Table_Operations.Join.Cross_Join_Spec
import project.Common_Table_Operations.Join.Zip_Spec
import project.Common_Table_Operations.Join.Union_Spec
import project.Common_Table_Operations.Join.Lookup_Spec
import project.Common_Table_Operations.Join.Replace_Spec
import project.Common_Table_Operations.Map_Spec
import project.Common_Table_Operations.Map_To_Table_Spec
import project.Common_Table_Operations.Missing_Values_Spec
import project.Common_Table_Operations.Nothing_Spec
import project.Common_Table_Operations.Offset_Spec
import project.Common_Table_Operations.Order_By_Spec
import project.Common_Table_Operations.Select_Columns_Spec
import project.Common_Table_Operations.Take_Drop_Spec
import project.Common_Table_Operations.Temp_Column_Spec
import project.Common_Table_Operations.Text_Cleanse_Spec
import project.Common_Table_Operations.Transpose_Spec

from project.Common_Table_Operations.Util import run_default_backend

type Test_Setup
    ## A common test configuration for tests of shared operations on the Table
       API.

       Arguments:
       - prefix: A name to prepend to test groups to identify the tested
         backend.
       - table_fn: A function that takes Nothing and returns a table using the
         tested backend containing data from `data/data.csv`.
       - empty_table_fn: A function that takes Nothing and returns an empty
         table using the tested backend.
       - table_builder: A function used to build a table using the tested
         backend from a vector of columns represented as pairs of name and
         vector of values. The second optional argument is connection or Nothing.
         An example signature of the method is `table_builder cols connection=Nothing`.
       - materialize: A helper function which materializes a table from the
         tested backend as an in-memory table. Used to easily inspect results of
         a particular query/operation.
       - is_database: Specifies if the tests are run on a database-backed
         backend.
       - test_selection: A selection of which suites should be run. Can be used
         to skip checks for backends which do not support particular features.
       - aggregate_test_selection: A selection of which aggregate test suites
         should be run. Can be used to skip checks for backends which do not
         support particular features.
       - create_connection_func: A function that takes Nothing and creates a related
         database connection or Nothing for in-memory tests.
       - light_table_builder: Like `table_builder`, but for Database backends it
         will not create a new table, but instead just create a query with the values inlined.
         Note that it has less guarantees about column types, but is faster.
       - is_integer_type: A predicate specifying if the given backend treats the
         given type as an integer type. See `SQL_Type_Mapping.is_integer_type` for more information.
       - is_feature_supported: A function that takes a `Feature` and returns a
         boolean indicating if the feature is supported by the backend.
       - flagged: A function that takes a `Dialect_Flag` and returns a boolean indicating if the 
         flag is set for the backend.
    Config prefix table_fn empty_table_fn (table_builder : (Vector Any -> (Any|Nothing)) -> Any) materialize is_database test_selection aggregate_test_selection create_connection_func light_table_builder is_integer_type=(.is_integer) is_feature_supported flagged is_operation_supported

    ## Specifies if the given Table backend supports custom Enso types.

       Currently, only the in-memory backend does.
    supports_custom_objects : Boolean
    supports_custom_objects self = self.is_database.not

    ## Checks if the provided column has integer type as defined by the backend.
    expect_integer_type self column =
        loc = Meta.get_source_location 1
        value_type = column.value_type
        if self.is_integer_type value_type then column else
            Test.fail ("Expected column ["+column.name+"] to have integer type, but got "+value_type.to_display_text+" (at " + loc + ").")

type Test_Selection
    ## The configuration specifying what features are supported by a given
       backend, driving what kind of test suites should be enabled.

       Arguments:
       - supported_replace_params: Specifies the possible values of
         Replace_Params that a backend supports.
       - run_advanced_edge_case_tests_by_default: A flag that tells whether to
         always run some more advanced tests. All backends will run basic tests
         that ensure that error checking is performed. However, when this flag
         is set to `False`, some more advanced edge-case tests may be disabled
         to save time.
         This flag must be set to `True` on the in-memory backend to ensure our own
         implementation is thoroughly tested. It should also be enabled in fast,
         local backends like SQLite or Postgres. Backends that speak to remote
         databases may have this flag disabled to save time.
         If `ENSO_ADVANCED_EDGE_CASE_TESTS` environment variable is set to `True`,
         the advanced tests are ran regardless of this setting..
    Config supported_replace_params=Nothing run_advanced_edge_case_tests_by_default=True

    ## Specifies if the advanced edge case tests shall be run.

       These tests are always run if `run_advanced_edge_case_tests_by_default`
       flag is set to `True`. If that flag is set to `False`, they are only run
       if the `ENSO_ADVANCED_EDGE_CASE_TESTS` environment variable is set.
    run_advanced_edge_case_tests self -> Boolean =
        self.run_advanced_edge_case_tests_by_default || (Environment.get "ENSO_ADVANCED_EDGE_CASE_TESTS" . is_nothing . not)

add_specs suite_builder setup =
    Add_Group_Number_Spec.add_specs suite_builder setup
    Add_Row_Number_Spec.add_specs suite_builder setup
    Aggregate_Spec.add_specs suite_builder setup
    Coalesce_Spec.add_specs suite_builder setup
    Column_Name_Edge_Cases_Spec.add_specs suite_builder setup
    Column_Operations_Spec.add_specs suite_builder setup
    Conversion_Spec.add_specs suite_builder setup
    Core_Spec.add_specs suite_builder setup
    Cross_Join_Spec.add_specs suite_builder setup
    Cross_Tab_Spec.add_specs suite_builder setup
    Date_Time_Spec.add_specs suite_builder setup
    Derived_Columns_Spec.add_specs suite_builder setup
    Distinct_Spec.add_specs suite_builder setup
    Expression_Spec.add_specs suite_builder detailed=False setup
    Filter_Spec.add_specs suite_builder setup
    Integration_Tests.add_specs suite_builder setup
    Join_Spec.add_specs suite_builder setup
    Lookup_Spec.add_specs suite_builder setup
    Map_Spec.add_specs suite_builder setup
    Map_To_Table_Spec.add_specs suite_builder setup
    Missing_Values_Spec.add_specs suite_builder setup
    Nothing_Spec.add_specs suite_builder setup
    Offset_Spec.add_specs suite_builder setup
    Order_By_Spec.add_specs suite_builder setup
    Replace_Spec.add_specs suite_builder setup
    Select_Columns_Spec.add_specs suite_builder setup
    Take_Drop_Spec.add_specs suite_builder setup
    Temp_Column_Spec.add_specs suite_builder setup
    Text_Cleanse_Spec.add_specs suite_builder setup
    Transpose_Spec.add_specs suite_builder setup
    Union_Spec.add_specs suite_builder setup
    Zip_Spec.add_specs suite_builder setup

main filter=Nothing = run_default_backend add_specs filter
