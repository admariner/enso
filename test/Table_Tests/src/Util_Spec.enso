from Standard.Base import all

from Standard.Table import Column, Table

from Standard.Database import all

from Standard.Test import all

from enso_dev.Test_Tests.Helpers import expect_test_failure

from project.Util import all

add_specs suite_builder =
    suite_builder.group "Table/Column.should_equal helpers" group_builder->
        group_builder.specify "should report correct location for Table" <|
            r1 = expect_test_failure <|
                (Table.new [["X", [1]]]) . should_equal (Table.new [["X", [2]]])
            r1.message.should_contain "Util_Spec.enso:17"

            r2 = expect_test_failure <|
                (Table.new [["X", [1]]]) . should_equal (Table.new [["A", [1]]])
            r2.message.should_contain "Util_Spec.enso:21"

        group_builder.specify "should report correct location for Column" <|
            r1 = expect_test_failure <|
                Column.from_vector "X" [1] . should_equal (Column.from_vector "X" [2])
            r1.message.should_contain "Util_Spec.enso:26"

            r2 = expect_test_failure <|
                Column.from_vector "X" [1] . should_equal (Column.from_vector "A" [1])
            r2.message.should_contain "Util_Spec.enso:30"

        group_builder.specify "should report correct location for DB_Table" <|
            tables = DB_Tables.make
            r1 = expect_test_failure <|
                tables.t1 . should_equal tables.t2
            r1.message.should_contain "Util_Spec.enso:36"

            r2 = expect_test_failure <|
                tables.t1 . should_equal tables.tA
            r2.message.should_contain "Util_Spec.enso:40"

        group_builder.specify "should report correct location for DB_Column" <|
            tables = DB_Tables.make
            c1 = tables.t1.at "X"
            c2 = tables.t2.at "X"
            cA = tables.tA.at "A"

            r1 = expect_test_failure <|
                c1 . should_equal c2
            r1.message.should_contain "Util_Spec.enso:50"

            r2 = expect_test_failure <|
                c1 . should_equal cA
            r2.message.should_contain "Util_Spec.enso:54"

        group_builder.specify "Two Columns Are Equal" <|
            expected_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column.should_equal expected_column
        group_builder.specify "Two Columns With Different Name are Not Equal" <|
            expected_column = Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col2" ["Quis", "custodiet", "ipsos", "custodes?"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Expected column name Col1, but got Col2 (at LOCATION_PATH)."
        group_builder.specify "Two Columns With Different Lengths are Not Equal" <|
            expected_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Expected column length 4, but got 3 (at LOCATION_PATH)."
        group_builder.specify "Two Columns with different content Are Not Equal" <|
            expected_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col" ["Who", "guards", "the", "guards?"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: Col differs at row 0.\n\t  Actual  : Who\n\t  Expected: Quis\n\t (at LOCATION_PATH).'
        group_builder.specify "Two Columns Are Not Equal in Row 3" <|
            expected_column = Column.from_vector "My Column" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "My Column" ["Quis", "custodiet", "ipsos", "guards?"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: My Column differs at row 3.\n\t  Actual  : guards?\n\t  Expected: custodes?\n\t (at LOCATION_PATH).'
        group_builder.specify "Two Columns with different types Are Not Equal" <|
            expected_column = Column.from_vector "Col" ["1", "2", "3", "4"]
            actual_column = Column.from_vector "Col" [1, 2, 3, 4]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Expected column type (Char Nothing True), but got (Integer 64 bits) (at LOCATION_PATH)."
        group_builder.specify "Comparing a Column to non column" <|
            expected_column = 42
            actual_column = Column.from_vector "Col" [1, 2, 3, 4]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Got a Column, but expected a 42 (at LOCATION_PATH)."
        group_builder.specify "Two Columns Containing NaNs Are Equal" <|
            # This is somewhat of a special case, as NaN != NaN but for the purposes of testing we consider them equal
            expected_column = Column.from_vector "Col" [1.0, 2.0, Number.nan]
            actual_column = Column.from_vector "Col" [1.0, 2.0, Number.nan]
            actual_column.should_equal expected_column
        group_builder.specify "Two Columns Containing Nothing Are Equal" <|
            expected_column = Column.from_vector "Col" [1.0, 2.0, Nothing]
            actual_column = Column.from_vector "Col" [1.0, 2.0, Nothing]
            actual_column.should_equal expected_column
        group_builder.specify "Comparing to Actual Nothing Value should fail" <|
            expected_column = Column.from_vector "Col" [1.0, 2.0, 3.0]
            actual_column = Column.from_vector "Col" [1.0, 2.0, Nothing]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: Col differs at row 2.\n\t  Actual  : Nothing\n\t  Expected: 3.0\n\t (at LOCATION_PATH).'
        group_builder.specify "Comparing to Expected Nothing Value should fail" <|
            expected_column = Column.from_vector "Col" [1.0, 2.0, Nothing]
            actual_column = Column.from_vector "Col" [1.0, 2.0, 3.0]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: Col differs at row 2.\n\t  Actual  : 3.0\n\t  Expected: Nothing\n\t (at LOCATION_PATH).'
        group_builder.specify "Comparing to Actual Nothing Value to Expected NaN Value should fail" <|
            expected_column = Column.from_vector "Col" [1.0, 2.0, Number.nan]
            actual_column = Column.from_vector "Col" [1.0, 2.0, Nothing]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: Col differs at row 2.\n\t  Actual  : Nothing\n\t  Expected: NaN\n\t (at LOCATION_PATH).'
        group_builder.specify "Comparing to Actual NaN Value to Expected Nothing Value should fail" <|
            expected_column = Column.from_vector "Col" [1.0, 2.0, Nothing]
            actual_column = Column.from_vector "Col" [1.0, 2.0, Number.nan]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: Col differs at row 2.\n\t  Actual  : NaN\n\t  Expected: Nothing\n\t (at LOCATION_PATH).'

        group_builder.specify "Two Tables Are Equal" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table.should_equal expected_table
        group_builder.specify "Two Tables Are Equal Ignoring Order" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["ipsos", "custodiet", "custodes?", "Quis"], Column.from_vector "Col2" ["the" , "guards", "guards?", "Who"]]
            actual_table.should_equal expected_table ignore_order=True
        group_builder.specify "Two Tables Are Equal Ignoring Order 2" <|
            expected_table = Table.new [Column.from_vector "A" ["a", "a", "b"], Column.from_vector "B" [1, 2, 3]]
            actual_table = Table.new [Column.from_vector "A" ["a", "a", "b"], Column.from_vector "B" [2, 1, 3]]
            actual_table.should_equal expected_table ignore_order=True
        group_builder.specify "Two Tables With Different Values" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "teh", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH" False)
            res.catch.message.should_end_with 'Column: Col2 differs at row 2.\n\t  Actual  : teh\n\t  Expected: the\n\t.'
            res.catch.message.should_start_with 'Tables differ at LOCATION_PATH.\nActual:'
        group_builder.specify "Two Tables With Different Values Ignoring Order" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "teh", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH" True)
            res.catch.message.should_end_with 'Column: Col2 differs at row 3.\n\t  Actual  : teh\n\t  Expected: the\n\t.'
            res.catch.message.should_start_with 'Tables differ at LOCATION_PATH.\nActual (sorted):'
        group_builder.specify "Tables different number of columns" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH" False)
            res.catch.message.should_end_with "Expected 1 columns, but got 2."
        group_builder.specify "Tables different number of columns2" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH" False)
            res.catch.message.should_end_with "Expected 2 columns, but got 1."
        group_builder.specify "Tables With Mismatched Column names" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH" False)
            res.catch.message.should_end_with "Expected column name Col1, but got Col."
        group_builder.specify "Comparing a Table to non Table" <|
            expected_table = 42
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH" False)
            res.catch.message.should_equal "Got a Table, but expected a 42 (at LOCATION_PATH)."

type DB_Tables
    Value t1 t2 tA

    make =
        connection = Database.connect ..In_Memory
        t1 = (Table.new [["X", [1]]]).select_into_database_table connection "t1"
        t2 = (Table.new [["X", [2]]]).select_into_database_table connection "t2"
        tA = (Table.new [["A", [1]]]).select_into_database_table connection "tA"
        DB_Tables.Value t1 t2 tA


main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter
